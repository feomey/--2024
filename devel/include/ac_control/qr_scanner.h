// Generated by gencpp from file ac_control/qr_scanner.msg
// DO NOT EDIT!


#ifndef AC_CONTROL_MESSAGE_QR_SCANNER_H
#define AC_CONTROL_MESSAGE_QR_SCANNER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ac_control
{
template <class ContainerAllocator>
struct qr_scanner_
{
  typedef qr_scanner_<ContainerAllocator> Type;

  qr_scanner_()
    : message()
    , state(false)
    , mode(0)
    , position()  {
    }
  qr_scanner_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , state(false)
    , mode(0)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _state_type;
  _state_type state;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::ac_control::qr_scanner_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ac_control::qr_scanner_<ContainerAllocator> const> ConstPtr;

}; // struct qr_scanner_

typedef ::ac_control::qr_scanner_<std::allocator<void> > qr_scanner;

typedef boost::shared_ptr< ::ac_control::qr_scanner > qr_scannerPtr;
typedef boost::shared_ptr< ::ac_control::qr_scanner const> qr_scannerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ac_control::qr_scanner_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ac_control::qr_scanner_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ac_control::qr_scanner_<ContainerAllocator1> & lhs, const ::ac_control::qr_scanner_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.state == rhs.state &&
    lhs.mode == rhs.mode &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ac_control::qr_scanner_<ContainerAllocator1> & lhs, const ::ac_control::qr_scanner_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ac_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ac_control::qr_scanner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ac_control::qr_scanner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ac_control::qr_scanner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ac_control::qr_scanner_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ac_control::qr_scanner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ac_control::qr_scanner_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ac_control::qr_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f44d1ea4409fff8982b454001169518";
  }

  static const char* value(const ::ac_control::qr_scanner_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f44d1ea4409fff8ULL;
  static const uint64_t static_value2 = 0x982b454001169518ULL;
};

template<class ContainerAllocator>
struct DataType< ::ac_control::qr_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac_control/qr_scanner";
  }

  static const char* value(const ::ac_control::qr_scanner_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ac_control::qr_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message\n"
"bool state\n"
"int32 mode\n"
"string position\n"
;
  }

  static const char* value(const ::ac_control::qr_scanner_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ac_control::qr_scanner_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct qr_scanner_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ac_control::qr_scanner_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ac_control::qr_scanner_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "position: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AC_CONTROL_MESSAGE_QR_SCANNER_H
