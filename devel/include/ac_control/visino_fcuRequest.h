// Generated by gencpp from file ac_control/visino_fcuRequest.msg
// DO NOT EDIT!


#ifndef AC_CONTROL_MESSAGE_VISINO_FCUREQUEST_H
#define AC_CONTROL_MESSAGE_VISINO_FCUREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ac_control
{
template <class ContainerAllocator>
struct visino_fcuRequest_
{
  typedef visino_fcuRequest_<ContainerAllocator> Type;

  visino_fcuRequest_()
    : vision_flag(false)
    , fcu_flag(false)  {
    }
  visino_fcuRequest_(const ContainerAllocator& _alloc)
    : vision_flag(false)
    , fcu_flag(false)  {
  (void)_alloc;
    }



   typedef uint8_t _vision_flag_type;
  _vision_flag_type vision_flag;

   typedef uint8_t _fcu_flag_type;
  _fcu_flag_type fcu_flag;





  typedef boost::shared_ptr< ::ac_control::visino_fcuRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ac_control::visino_fcuRequest_<ContainerAllocator> const> ConstPtr;

}; // struct visino_fcuRequest_

typedef ::ac_control::visino_fcuRequest_<std::allocator<void> > visino_fcuRequest;

typedef boost::shared_ptr< ::ac_control::visino_fcuRequest > visino_fcuRequestPtr;
typedef boost::shared_ptr< ::ac_control::visino_fcuRequest const> visino_fcuRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ac_control::visino_fcuRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ac_control::visino_fcuRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ac_control::visino_fcuRequest_<ContainerAllocator1> & lhs, const ::ac_control::visino_fcuRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vision_flag == rhs.vision_flag &&
    lhs.fcu_flag == rhs.fcu_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ac_control::visino_fcuRequest_<ContainerAllocator1> & lhs, const ::ac_control::visino_fcuRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ac_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ac_control::visino_fcuRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ac_control::visino_fcuRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ac_control::visino_fcuRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fabbef3999e74196457a8185716d089";
  }

  static const char* value(const ::ac_control::visino_fcuRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fabbef3999e7419ULL;
  static const uint64_t static_value2 = 0x6457a8185716d089ULL;
};

template<class ContainerAllocator>
struct DataType< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac_control/visino_fcuRequest";
  }

  static const char* value(const ::ac_control::visino_fcuRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 客户端请求时发送的两个数字\n"
"bool vision_flag  # 请求中包含一个布尔值，表示视觉标志位\n"
"bool fcu_flag  # 请求中包含一个布尔值，表示飞控标志位\n"
;
  }

  static const char* value(const ::ac_control::visino_fcuRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vision_flag);
      stream.next(m.fcu_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visino_fcuRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ac_control::visino_fcuRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ac_control::visino_fcuRequest_<ContainerAllocator>& v)
  {
    s << indent << "vision_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_flag);
    s << indent << "fcu_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fcu_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AC_CONTROL_MESSAGE_VISINO_FCUREQUEST_H
